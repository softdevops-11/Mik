<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menu.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAQkJCAE1NTQBKSkoATExMAEtLSwBLS0sASkpKAEtLSwlLS0sNS0tLCktLSwZLS0sGS0tLB0tL
        Sw9LS0saS0tLE0tLSxNLS0sOS0tLDUtLSxZLS0scS0tLCklJSQBOTk4AUlJSAEZGRgBLS0sBSkpKAVpa
        WgBFRUUASEhIAAAAAABCQkIATExMAElJSQFLS0sES0tLBktLSwdLS0sLS0tLKUtLS0tLS0tLS0tLREtL
        S0NLS0tHS0tLUEtLS1tLS0tWS0tLVUtLS01LS0tNS0tLVktLS1lLS0tAS0tLLEtLSyVLS0slS0tLKEtL
        SyFLS0sIVVVVAExMTABLS0sAAAAAAEJCQgBOTk4ASkpKA0xMTBBLS0sgS0tLM0tLS0dLS0tXS0tLYktL
        S2RLS0tjS0tLYktLS2NLS0thS0tLYEtLS15MTExeUFBQeUxMTF1LS0tZS0tLV0tLS1RLS0tQS0tLTEtL
        S0pLS0tKS0tLO0tLSx5LS0sSS0tLB0tLSwAAAAAAQkJCAE5OTgBKSkoCTExMCktLSxVLS0shS0tLM0tL
        S0xLS0tVS0tLVExMTF5NTU1jS0tLUklJSVFLS0tNTExMR0tLS4FVVVXNUFBQUEtLSz5LS0s8S0tLOEtL
        SzRLS0swS0tLLUtLSytLS0spS0tLI0tLSxlMTEwLSkpKAQAAAABCQkIAPT09AE9PTwBwcHAAfX19AEpK
        SgBLS0sIS0tLIEtLSydMTEwhREREbUNDQ7lWVlZPf39/ilRUVDZFRUVXSEhI4lpaWuxUVFRGSUlJIEtL
        Sx1LS0sYS0tLFEtLSxJLS0sSTExMEEtLSwpLS0sETExMA0xMTAJISEgAAAAAAEJCQgBiYmIAenp6AGpq
        ahZYWFgLXl5eAFlZWQBLS0sBAAAAAE5OTgA3NzeTOjo6/lNTU8KxsbHqc3Nzcj09PcJOTk7/XFxc9lZW
        VkhAQEAETExMBExMTAJKSkoBX19fAP///wBMTEwCSEhIAU5OTgBMTEwATExMAEhISAAAAAAAAAAAAF5e
        XgB9fX0AdHR0W3d3d7FXV1dTR0dHEE1NTQBmZmYGbW1tQFxcXNhpaWn/aGho/9LS0v+MjIz0fn5+/oaG
        hv90dHT/Y2NjZ4uLiwBXV1cANjY2AENDQwlVVVU5YmJiQTo6OgBSUlIAb29vAENDQwAAAAAAAAAAAAAA
        AAAAAAAAX19fAGJiYgBgYGAvgoKC7X19ffpXV1fBTU1NcW1tbaR2dnbveXl5/2tra/93d3f/6urq/6io
        qP99fX3/pqam/7Kysv+wsLDYqKioZVBQUCw+Pj5qS0tLuGVlZetra2ticnJyAF1dXQBCQkIAQkJCAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAVVVVAEFBQQppaWm7l5eX/4aGhv9kZGT/bGxs/2NjY/9ZWVn/TExM/4mJ
        if/19fX/x8fH/2VlZf90dHT/jIyM/6ioqP+7u7v5goKC6VNTU/5qamr/dXV12WRkZB1lZWUAXV1dAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB7e3sAVlZWAFNTU3p6enr/mpqa/319ff9vb2//aWlp/2Nj
        Y/9cXFz/bW1t/5WVlf93d3f/T09P/1tbW/9sbGz/gICA/5GRkf+SkpL/mZmZ/3p6ev9ra2udUlJSBGFh
        YQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMbGxgBjY2MAZWVlZXV1df6Ghob/f39//3t7
        e/93d3f/cXFx/2tra/9hYWH/VlZW/0xMTP9FRUX/RkZG/1RUVP9oaGj/V1dX/0hISP9lZWX/eXl5/5CQ
        kLNnZ2cMampqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFNTUwBiYmIAaWlpAGVlZR2EhITOhISE/3l5
        ef9/f3//hISE/4SEhP95eXn/bW1t/2lpaf9mZmb/XFxc/1FRUf9HR0f/RERE/1FRUf9TU1P/aWlp/6en
        p//Ozs7/oaGhkf///wBNTU0AWlpaAAAAAAAAAAAAAAAAAAAAAABTU1MARkZGADo6OgCHh4cAfn5+eo6O
        jv93d3f/dXV1/4ODg/+Ghob/eHh4/1paWv9DQ0P/WFhY/3BwcP9qamr/Xl5e/1RUVP9JSUn/RERE/35+
        fv/Z2dn/8PDw/7Kysv+vr6/Rj4+PHGBgYABNTU0AVlZWAGBgYABfX18AAAAAAFJSUhJFRUUpPj4+VU9P
        T4lzc3Pkampq/1FRUf9YWFj/iYmJ/4yMjP9YWFj/kJCQ/3p6ev9iYmL/c3Nz/3d3d/9ra2v/YGBg/1VV
        Vf9HR0f/XV1d/9DQ0P+9vb3/jo6O/7S0tP1jY2O7RkZGeExMTEVYWFghY2NjCGNjYwAAAAAAVVVVj09P
        T+VJSUn9XV1d/6ysrP/Ly8v/vr6+/6qqqv+enp7/l5eX/1dXV/+SkpL/s7Oz/5CQkP+BgYH/hISE/3h4
        eP9oaGj/W1tb/1BQUP9ERET/WVlZ/3Fxcf9/f3//rKys/4SEhP9ra2v/cnJy+nFxccBmZmYraWlpAAAA
        AABZWVkYWVlZhFhYWPFsbGz/nJyc/6+vr//s7Oz/8/Pz/7e3t/+zs7P/ioqK/4aGhv+zs7P/q6ur/5iY
        mP+Kior/W1tb/z09Pf9AQED/T09P/0xMTP9DQ0P/VlZW/3Jycv+fn5//p6en/4uLi/+AgIC8c3NzN0hI
        SAFmZmYAAAAAAFlZWQBTU1MCU1NTUH5+ftm1tbX/kpKS/5ubm//IyMj/w8PD/8jIyP/FxcX/t7e3/7e3
        t/+xsbH/p6en/4SEhP9PT0//QUFB/z8/P/9QUFD/UFBQ/0VFRf9MTEz/ZmZm/42Njf+Xl5f5dHR0j1xc
        XBV2dnYAR0dHAF9fXwAAAAAAS0tLAExMTAD///8AbW1tmouLi/+2trb/vLy8/83Nzf/Y2Nj/29vb/9ra
        2v/U1NT/ysrK/76+vv+ysrL/lZWV/4WFhf+enp7/oqKi/2hoaP9XV1f/S0tL/0ZGRv9dXV3/ampq/2Bg
        YOpaWloxXV1dAEhISABWVlYAAAAAAAAAAAB5eXkALCwsEEZGRoJVVVXwe3t7/7q6uv/W1tb/4uLi/+np
        6f/t7e3/6+vr/+Tk5P/Z2dn/y8vL/7y8vP+rq6v/q6ur/8HBwf+srKz/dHR0/19fX/9PT0//Q0ND/1hY
        WP+Li4v/dnZ2/1lZWcJHR0c6////AG1tbQB9fX0AAAAAAHt7ez6FhYW2n5+f/8fHx//f39//zMzM/+Pj
        4//y8vL/+Pj4//z8/P/6+vr/8vLy/+bm5v/W1tb/xMTE/7Ozs/+np6f/n5+f/4mJif9xcXH/YmJi/1NT
        U/9DQ0P/YGBg/+Hh4f/p6en/w8PD/5qamueHh4dud3d3DH5+fgAAAAAAjIyMe6ysrL28vLzjwsLC+cfH
        x//Dw8P/6enp//n5+f/8/Pz/4+Pj/+Hh4f/n5+f/4+Pj/9ra2v/Kysr/t7e3/6ampv+VlZX/enp6/2Fh
        Yf9gYGD/VVVV/0RERP9eXl7/ycnJ/9DQ0P/KysrwwcHB06ampp18fHwniIiIAAAAAAD///8AMjIyCVpa
        WiNmZmZOkJCQydHR0f/x8fH//f39/8nJyf9vb2//mJiY/8nJyf/MzMz/0dHR/8rKyv+4uLj/p6en/52d
        nf+UlJT/dnZ2/11dXf9UVFT/RUVF/1ZWVv9+fn72dXV1fmhoaDVSUlIUAAAAAq2trQD///8AAAAAAFtb
        WwBeXl4AZWVlAJubmwCysrJa3Nzc+uzs7P/7+/v/rq6u/2pqav+6urr/5eXl/8vLy//ExMT/x8fH/7i4
        uP+lpaX/o6Oj/7CwsP+MjIz/YGBg/1RUVP9GRkb/Xl5e/3V1dbdfX18Jbm5uAGRkZABdXV0AampqAF1d
        XQAAAAAAAAAAAAAAAABbW1sAV1dXAFZWVlNqamr4l5eX/9XV1f+0tLT/kZGR/9nZ2f/Ozs7/wMDA/8rK
        yv/ExMT/s7Oz/56env+MjIz/qqqq/6Kiov9mZmb/UlJS/01NTf9gYGDpZWVlQmdnZwB0dHQAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFxcXAAREREAUVFRbUpKSveUlJT/09PT/7q6uv/CwsL/1tbW/9XV
        1f/Y2Nj/0dHR/8LCwv+wsLD/mpqa/4CAgP+CgoL/n5+f/3Jycv9VVVX/Xl5e/19fX6xISEgEW1tbAGBg
        YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUlJSAEpKSgBHR0dQf39/+OTk5P/o6Oj/w8PD/93d
        3f/o6Oj/3t7e/9HR0f/IyMj/urq6/6enp/+mpqb/hoaG/29vb/94eHj/eXl5/4WFhf+tra3/e3t70lBQ
        UBdaWloAXl5eAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUVFQAAAAAA319faTKysr/y8vL8JiY
        mLuoqKi7ysrK+qqqqv+3t7f/uLi4/7e3t/+IiIj/mpqa/93d3f+hoaH/f39//5eXl/+Hh4f1oKCg/9jY
        2P+oqKj4ZGRkS2xsbABdXV0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHZ2dgBycnIkpKSktays
        rIl1dXU6Nzc3CqOjow2BgYFyZmZm9s7Ozv/m5ub/r6+v/4iIiP97e3v/0dHR/5ycnP6Kiorhi4uLlGpq
        akJxcXF1mZmZz7y8vP+QkJCV////AF5eXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAd3d3AHZ2
        dg19fX0V////AH9/fwBbW1sAaWlpADQ0NBlra2vc4eHh/9XV1f2Dg4PRioqK+W5ubv+zs7P/mpqa3GFh
        YTIAAAABbW1tAJOTkwBXV1cWkJCQYpaWlo5mZmYQaGhoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAB2dnYAc3NzAHp6egBVVVUAY2NjAGBgYABVVVUAJycnCnx8fMDd3d3/oKCgtVBQUChvb2+8bW1tqJSU
        lNSZmZmkAAAAAWRkZABpaWkAPDw8AGVlZQCpqakAXFxcCGtrawRmZmYAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFxcXAAAAAAAl5eXn729vdJvb28ndnZ2AGho
        aDVlZWUefn5+SIWFhU+Xl5cAXV1dAAAAAAAAAAAAX19fAE5OTgBoaGgAZWVlAGNjYwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAW1tbANnZ2QCUlJRpmJiYTLe3
        twD///8Ab29vAGtrawAAAAABODg4Az8/PwBfX18AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAwAAAA8AAAAPgAAAP4AAAH+AA
        AB+AAAAPAAAAAQAAAAEAAAABAAAAAQAAAAEAAAADAAAAAQAAAAEAAAABAAAAAQAAAAHAAAAfwAAAH8AA
        AB/AAAAfwAAAH8AAAB/AAAAf/wAMH/8AD/8=
</value>
  </data>
</root>